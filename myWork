%scaner_name Lexer
%codes_type lexem_code
%codes 
Id
%ident_name 
Id
%token_fields
"usigned __int128 int_val; __float128 float_val;"
%class_members
"unsigned __int128 int_part; __float128 frac_part; ssize_t power; ssize_t sign"
%codes
String, If, Float,
Else, Var, Int,
Bool, Char, Void,
Array, True, False,
Proto, Func, Const,
Elif, Endif, For,
In, While, Repeat,
Until, Exit, Continue,
Return, Read, Print,
Kw_string,Kw_float,
Kw_int,Kw_char, Kw_void,
Kw_bool,

Equal, Plus, Minus,
Mul, Div, Mod,
LT, GT, LEQ,
GEQ, Nequal, FDiv,
Lor, LNor, LNot,
LAnd, LNand, LXor,
LNXor, BXor, BNXor,
Bor, BNor, BAnd,
BNAnd, LShift, RShift,
BNot, Pow, FPow,
Assign, Lendif_block, Rendif_block,
Lbegin_block, Rbegin_block, Dim_size,
cond_op, Semicolon, Comma,
after_label, Lelem_mass, Relem_mass,
Colon, APlus, AMinus, 
AMul, ADiv, AFDiv, 
APow, AFPow, AMod,
ABAnd, ABNAnd, ALShift,
ARShift, ABor, ABNor,
ABXor, ABNXor, ALor,
ALNor, ALXor, ALNXor,
ALAnd, ALNAnd 


%idents {[:Letter:]|[:letter:]|_}{[:Letter:]|[:letter:]|_|[:digits:]}
%keywords
"если" : If, "иначе" : Else, "цел" : Kw_int, "перем": Var, "вещ" : Kw_float,"лог": Kw_bool,
"симв" : Kw_char, "строка" :Kw_string,
"ничто" : Kw_void, "массив" : Array, "истина": True, "ложь": False,"прото": Proto,
"функ": Func, "конст": Const, "то" : To, "инес": Elif, "всё": Endif,"для": For,
"из": In,"пока": While, "повторяй": Repeat, "покуда": Until, "выйди": Exit,
"продолжи": Continue, "возврат": Return, "ввод": Read, "вывод":Print

%delimiters
"=" : Equal, "+" : Plus, "-" : Minus, "*" : Mul, "/" : Div, "%" : Mod,
"<": LT, ">":GT, "<=": LEQ, ">=":GEQ, "!=":Nequal,"/.": FDiv, "||": Lor,
"!||": LNor, "!":LNot, "&&": LAnd, "!&&": LNAnd, "^^": LXor,
"!^^": LNXor,"^":BXor,"~^":BNXor,"|":Bor, "~|":BNor,
"&":BAnd, "~&":BNAnd, "<<":LShift,">>":RShift,"~":BNot, "**":Pow, "**.":FPow,":=":Assign, 
"{":Lendif_block,"}":Rendif_block, "(":Lbegin_block, ")":Rbegin_block,"#":Dim_size, "?":cond_op,";":Semicolon, ",":Comma, 
"::":after_label,"[":Lelem_mass,"]":Relem_mass,":":Colon, "+:=" : APlus, "-:=" : AMinus, "*:=" : AMul, "/:=" : ADiv, "/.:=" : AFDiv,
"**:=" : APow, "**.:=" : AFPow, "%:=" : AMod,
"&:=" : ABAnd, "~&:=" : ABNAnd, "<<:=" : ALShift, ">>:=" : ARShift, "|:=" : ABor, "~|:=" : ABNor, "^:=" : ABXor, 
"~^:=" : ABNXor, "||:=" : ALor, "!||:=" : ALNor, "^^:=" : ALXor, "!^^:=" : ALNXor, "&&:=" : ALAnd, "!&&:=" ALNAnd

%strings "buffer.clean();":"token.code=(buffer.length()==1)?Char:String;"
{"([:ndg:]|"")*"}
{"([:ndq:]$write|""$write)*"}   

%numbers
