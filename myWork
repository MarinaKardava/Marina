%scaner_name Lexer
%codes_type lexemcodes


%ident_name 
Id

%idents {[:Letter:]|[:letter:]|_}{[:Letter:]|[:letter:]|_|[:digits:]}

%class_members
" __int128 int_value;__int128 fract_part;size_t exponent;int num_of_digits;int sign_of_degree;bool is_float;                              
__float128 build_float();"

%token_fields
"unsigned __int128 int_val; __float128 float_val;"

%codes

Colon,                Semicolon,               Comma,
Cond_op,              Lor,                     LNor,
LXor,                 LNXor,                   LAnd, 
LNAnd,                LNot,                    LT,
GT,                   LEG,                     GEQ,
Equal,                Nequal,                  Bor,
BNor,                 BXor,                    BNXor, 
BAnd,                 BNAnd,                   LShift,
Rshift,               BNot,                    Plus,
Minus,                Dim_size,                Open_round,
Close_round,          Open_square,             Close_square,
Openif_block,         Endif_block,             After_lable,
ColonAssign,          Mul,                     Div,
Module,               FDiv,                    Pow,
FPow,                 PlusColonAssign,         MinusColonAssign,
MultColonAssign,      SlashColonAssign,        SlashDotColonAssign,
TwoMultColonAssign,   TwoMultDotColonAssign,   PercColonAssign,
AmpColonAssign,       TilAmpColonAssign,       LShiftColAssign,
RShiftColAssign,      PipColAssign,            TilPipColAssign,
CirColAssign,         TilCirColAssign,         TwoPipColAssign,
NTwoPipColAssign,     TwoCirColAssign,         NTwoCirColAssign,
TwoColAssign,         NTwoColAssign,

String,    If,         Float,
Else,      Var,        Int,
Bool,      Char,       Void,
Array,     True,       False,
Proto,     Func,       Const,
Elif,      Endif,      For,
In,        While,      Repeat,
Until,     Exit,       Continue,
Return,    Read,       Print,
Then,      Kw_bool,    Kw_string,
Kw_float,  Kw_int,     Kw_char,
Kw_void


%impl_additions "
#include <quadmath> 
size_t digit2int(char32_t ch)
{
size_t v =  ch - U'0';
return (v<=9)? v:(v&0b1101'1111) - 7;
};
__float128  Lexer::build_float()
{
__float128 num;                                                                               
num = int_value + fract_part*powq(10, num_of_digits);
num = num*powq(10, sign_of_degree*exponent);
return num;}"

%keywords
"ввод" : Read, "вещ" : Kw_float, "возврат" : Return, "всё" : Endif, "вывод" : Print,
"выйди" : Exit, "для" : For, "если" : If, "из" : In, "иначе" : Else, "инес" : Elif,
"истина" : True, "конст" : Const, "лог" : Kw_bool, "ложь" : False, "массив" : Array,
"ничто" : Kw_void, "перем" : Var, "повторяй" : Repeat, "пока" : While, "покуда" : Until,
"продолжи" : Continue, "прото" : Proto, "симв" : Kw_char, "строка" : Kw_string,
"то" : Then, "функ" : Func, "цел" : Kw_int

%delimiters
":" : Colon, ";" : Semicolon, "," : Comma, "?" : Cond_op, "||" : Lor, "!||" : LNor,
"^^" : LXor, "!^^" : LNXor, "&&" : LAnd, "!&&" : LNAnd, "!" : LNot, "<" : LT, ">" : GT,
"<=" : LEQ, ">=" : GEQ, "=" : Equal, "!=" : Nequal, "|" : Bor, "~|" : BNor, "^" : BXor,
"~^" : BNXor, "&" : BAnd, "~&" : BNAnd, "<<" : LShift, ">>" : RShift, "~" : BNot,
"+" : Plus, "-" : Minus, "#" : Dim_size, "(" : Open_round, ")" : Close_round,
"[" : Open_square, "]" : Close_square, "{" : Openif_block, "}" : Endif_block,
"::" : After_label, ":=" : ColonAssign, "*" : Mul, "/" : Div, "%" : Module, "/.": FDiv,
"**":Pow, "**.":FPow, "+:=" : PlusColonAssign, "-:=" : MinusColonAssign,
"*:=" : MultColonAssign, "/:=" : SlashColonAssign, "/.:=" : SlashDotColonAssign, 
"**:=" : TwoMultColonAssign, "**.:=" : TwoMultDotColonAssign, "%:=" : PercColonAssign,
"&:=" : AmpColonAssign, "~&:=" : TilAmpColonAssign, "<<:=" : LShiftColAssign,
">>:=" : RShiftColAssign, "|:=" : PipColAssign, "~|:=" : TilPipColAssign,
"^:=" : CirColAssign,"~^:=" : TilCirColAssign, "||:=" : TwoPipColAssign,
"!||:=" : NTwoPipColAssign, "^^:=" : TwoCirColAssign, "!^^:=" : NTwoCirColAssign,
"&&:=" : TwoColAssign, "!&&:=" : NTwoColAssign

%numbers "int_value = 0; fract_part = 0; exponent = 0;sign_of_degree=1; num_of_digits = 0; is_float = false" : "if(is_float)
{
token.code = Float;
token.float_val = build_value();
}
else
{
token.code = Int;
token.int_val = int_value;
}"

%action SetFlag "is_float = true;"
%action AddDecNumb "int_value = int_value*10 + digit2int(ch);"
%action AddBinNumb "int_value = (int_value << 1) + digit2int(ch);"
%action addOctDigit "int_value = (int_value << 3) + digit2int(ch);"
%action addHexDigit "int_value = (int_value << 4) + digit2int(ch);"
%action AddToDegre "exponent = exponent*10 + digit2int(ch);" 
%action AddDecToFract "fract_part = fract_part*10 + digit2int(ch); ++num_of_digits;"


{[:digits:]$AddDecNumb('?[:digits:]$AddDecNumb)*(.$SetFlag[:digits:]$AddDecToFract('?[:digits:]$AddDecToFract)*)
?((E|e)$SetFlag(\+|-)[:digits:]$AddToDegre('?[:digits:]$AddToDegre)*)?
|0o[:odigits:]$addOctDigit('?[:odigits:]$addOctDigit)*|
0(b|B)[:bdigits:]$AddBinNumb('?[:bdigits:]$AddBinNumb)*|
0(x|X)[:xdigits:]$addHexDigit('?[:xdigits:]$addHexDigit)*}
